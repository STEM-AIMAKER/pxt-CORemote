<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="M0FpRr`|LWBCHGWXNCuc" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="07Iy4:~{L~]wD%+n2N~u" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace mRemote {&#13;" line1="    let serialInited = 0&#13;" line2="&#13;" line3="    export enum Shake{&#13;" line4="        //% blockId=&quot;OFF&quot; block=&quot;OFF&quot;&#13;" line5="        OFF = 0,&#13;" line6="        //% blockId=&quot;ON&quot; block=&quot;ON&quot;&#13;" line7="        ON = 1&#13;" line8="    }&#13;" line9="    &#13;" line10="    export enum mMusic {&#13;" line11="        Dadadum = 0,&#13;" line12="        Entertainer,&#13;" line13="        Prelude,&#13;" line14="        Ode,&#13;" line15="        Nyan,&#13;" line16="        Ringtone,&#13;" line17="        Funk,&#13;" line18="        Blues,&#13;" line19="&#13;" line20="        Birthday,&#13;" line21="        Wedding,&#13;" line22="        Funereal,&#13;" line23="        Punchline,&#13;" line24="        Baddy,&#13;" line25="        Chase,&#13;" line26="        Ba_ding,&#13;" line27="        Wawawawaa,&#13;" line28="        Jump_up,&#13;" line29="        Jump_down,&#13;" line30="        Power_up,&#13;" line31="        Power_down&#13;" line32="    }&#13;" line33="    export enum ButtonState {&#13;" line34="        //% blockId=&quot;Press&quot; block=&quot;Press&quot;&#13;" line35="        Press = 0,&#13;" line36="        //% blockId=&quot;Realse&quot; block=&quot;Realse&quot;&#13;" line37="        Realse = 1&#13;" line38="    }&#13;" line39="    export enum Button {&#13;" line40="        //% blockId=&quot;K1&quot; block=&quot;K1&quot;&#13;" line41="        K1 = 0,&#13;" line42="        //% blockId=&quot;K2&quot; block=&quot;K2&quot;&#13;" line43="        K2 = 1,&#13;" line44="        //% blockId=&quot;K3&quot; block=&quot;K3&quot;&#13;" line45="        K3 = 2,&#13;" line46="        //% blockId=&quot;K4&quot; block=&quot;K4&quot;&#13;" line47="        K4 = 3,&#13;" line48="    }&#13;" line49="    export enum mRocker {&#13;" line50="        //% blockId=&quot;NoState&quot; block=&quot;NoState&quot;&#13;" line51="        NoState = 0,&#13;" line52="        //% blockId=&quot;Pressed&quot; block=&quot;Pressed&quot;&#13;" line53="        Pressed = 1,&#13;" line54="        //% blockId=&quot;Up&quot; block=&quot;Up&quot;&#13;" line55="        Up = 2,&#13;" line56="        //% blockId=&quot;Down&quot; block=&quot;Down&quot;&#13;" line57="        Down = 3,&#13;" line58="        //% blockId=&quot;Left&quot; block=&quot;Left&quot;&#13;" line59="        Left = 4,&#13;" line60="        //% blockId=&quot;Right&quot; block=&quot;Right&quot;&#13;" line61="        Right = 5&#13;" line62="    }&#13;" line63="&#13;" line64="function initSerial(): void {&#13;" line65="        if (0 == serialInited) {&#13;" line66="            serial.redirect(&#13;" line67="                SerialPin.P12,&#13;" line68="                SerialPin.P14,&#13;" line69="                BaudRate.BaudRate9600&#13;" line70="            );&#13;" line71="            serialInited = 1;&#13;" line72="        }&#13;" line73="    }&#13;" line74="&#13;" line75="&#13;" line76="function i2cwrite(addr: number, reg: number, value: number) {&#13;" line77="    let buf = pins.createBuffer(2);&#13;" line78="    buf[0] = reg;&#13;" line79="    buf[1] = value;&#13;" line80="    pins.i2cWriteBuffer(addr, buf);&#13;" line81="}&#13;" line82="&#13;" line83="function i2ccmd(addr: number, value: number) {&#13;" line84="    let buf2 = pins.createBuffer(1);&#13;" line85="    buf2[0] = value;&#13;" line86="    pins.i2cWriteBuffer(addr, buf2);&#13;" line87="}&#13;" line88="&#13;" line89="function i2cread(addr: number, reg: number) {&#13;" line90="    pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);&#13;" line91="    let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);&#13;" line92="    return val;&#13;" line93="}&#13;" line94="&#13;" line95="// function setFreq(freq: number): void {&#13;" line96="//     // Constrain the frequency&#13;" line97="//     let prescaleval = 25000000;&#13;" line98="//     prescaleval /= 4096;&#13;" line99="//     prescaleval /= freq;&#13;" line100="//     prescaleval -= 1;&#13;" line101="//     let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);&#13;" line102="//     let oldmode = i2cread(PCA9685_ADD, MODE1);&#13;" line103="//     let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep&#13;" line104="//     i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep&#13;" line105="//     i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler&#13;" line106="//     i2cwrite(PCA9685_ADD, MODE1, oldmode);&#13;" line107="//     control.waitMicros(5000);&#13;" line108="//     i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);&#13;" line109="// }&#13;" line110="&#13;" line111="// function setPwm(channel: number, on: number, off: number): void {&#13;" line112="//     if (channel &lt; 0 || channel &gt; 15)&#13;" line113="//         return;&#13;" line114="//     if (!initialized) {&#13;" line115="//         initPCA9685();&#13;" line116="//     }&#13;" line117="//     let buf = pins.createBuffer(5);&#13;" line118="//     buf[0] = LED0_ON_L + 4 * channel;&#13;" line119="//     buf[1] = on &amp; 0xff;&#13;" line120="//     buf[2] = (on &gt;&gt; 8) &amp; 0xff;&#13;" line121="//     buf[3] = off &amp; 0xff;&#13;" line122="//     buf[4] = (off &gt;&gt; 8) &amp; 0xff;&#13;" line123="//     pins.i2cWriteBuffer(PCA9685_ADD, buf);&#13;" line124="// }&#13;" line125="&#13;" line126="&#13;" line127="//% blockId=GetButton block=&quot;Button|key %num|value %value&quot;&#13;" line128="//% weight=96&#13;" line129="//% blockGap=10&#13;" line130="//% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5&#13;" line131="export function GetButton(num: Button, value: ButtonState): boolean {&#13;" line132="    let temp = false;&#13;" line133="    switch (num) {&#13;" line134="        case Button.K1: {&#13;" line135="            pins.setPull(DigitalPin.P13, PinPullMode.PullUp);&#13;" line136="            if (pins.digitalReadPin(DigitalPin.P13) == value) {&#13;" line137="                temp = true;&#13;" line138="            }&#13;" line139="            else {&#13;" line140="                temp = false;&#13;" line141="            }&#13;" line142="            break;&#13;" line143="        }&#13;" line144="        case Button.K2: {&#13;" line145="            pins.setPull(DigitalPin.P14, PinPullMode.PullUp);&#13;" line146="            if (pins.digitalReadPin(DigitalPin.P14) == value) {&#13;" line147="                temp = true;&#13;" line148="            }&#13;" line149="            else {&#13;" line150="                temp = false;&#13;" line151="            }&#13;" line152="            break;&#13;" line153="        }&#13;" line154="        case Button.K3: {&#13;" line155="            pins.setPull(DigitalPin.P15, PinPullMode.PullUp);&#13;" line156="            if (pins.digitalReadPin(DigitalPin.P15) == value) {&#13;" line157="                temp = true;&#13;" line158="            }&#13;" line159="            else {&#13;" line160="                temp = false;&#13;" line161="            }&#13;" line162="            break;&#13;" line163="        }&#13;" line164="        case Button.K4: {&#13;" line165="            pins.setPull(DigitalPin.P16, PinPullMode.PullUp);&#13;" line166="            if (pins.digitalReadPin(DigitalPin.P16) == value) {&#13;" line167="                temp = true;&#13;" line168="            }&#13;" line169="            else {&#13;" line170="                temp = false;&#13;" line171="            }&#13;" line172="            break;&#13;" line173="        }&#13;" line174="    }&#13;" line175="    return temp;&#13;" line176="}&#13;" line177="    //% blockId=&quot;onButtonPressed&quot; block=&quot;On remote button pressed  $btn&quot;&#13;" line178="    //% weight=96&#13;" line179="    //% blockGap=10&#13;" line180="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4&#13;" line181="    export function onButtonPressed(btn: Button, handler: () =&gt; void) {&#13;" line182="}&#13;" line183="    //% blockId=Rocker block=&quot;Rocker|value %value&quot;&#13;" line184="    //% weight=96&#13;" line185="    //% blockGap=10&#13;" line186="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=6&#13;" line187="    export function Rocker(value: mRocker): boolean {&#13;" line188="        pins.setPull(DigitalPin.P8, PinPullMode.PullUp);&#13;" line189="        let x = pins.analogReadPin(AnalogPin.P1);&#13;" line190="        let y = pins.analogReadPin(AnalogPin.P2);&#13;" line191="        let z = pins.digitalReadPin(DigitalPin.P8);&#13;" line192="        let now_state = mRocker.NoState;&#13;" line193="&#13;" line194="        if (x &lt; 200) // 上&#13;" line195="        {&#13;" line196="&#13;" line197="            now_state = mRocker.Up;&#13;" line198="&#13;" line199="        }&#13;" line200="        else if (x &gt; 900) //下&#13;" line201="        {&#13;" line202="&#13;" line203="            now_state = mRocker.Down;&#13;" line204="        }&#13;" line205="        else  // 左右&#13;" line206="        {&#13;" line207="            if (y &lt; 200) //右&#13;" line208="            {&#13;" line209="                now_state = mRocker.Right;&#13;" line210="            }&#13;" line211="            else if (y &gt; 900) //左&#13;" line212="            {&#13;" line213="                now_state = mRocker.Left;&#13;" line214="            }&#13;" line215="        }&#13;" line216="        if (z == 0)&#13;" line217="            now_state = mRocker.Pressed;&#13;" line218="        if (now_state == value)&#13;" line219="            return true;&#13;" line220="        else&#13;" line221="            return false;&#13;" line222="&#13;" line223="    }&#13;" line224="&#13;" line225="    //% blockId=Remote_Shake block=&quot;Remote Shake|value %value&quot;&#13;" line226="    //% weight=96&#13;" line227="    //% blockGap=10&#13;" line228="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=2&#13;" line229="    export function Remote_Shake(value: Shake): void {&#13;" line230="        switch (value) {&#13;" line231="            case Shake.ON: {&#13;" line232="                //setPwm(0, 0, 4095);&#13;" line233="                break;&#13;" line234="            }&#13;" line235="            case Shake.OFF: {&#13;" line236="                //setPwm(0, 0, 0);&#13;" line237="                break;&#13;" line238="            }&#13;" line239="        }&#13;" line240="    }&#13;" line241="&#13;" line242="    //% blockId=PlayMusic block=&quot;PlayMusic|%index&quot;&#13;" line243="    //% weight=96&#13;" line244="    //% blockGap=10&#13;" line245="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4&#13;" line246="    export function PlayMusic(index: mMusic): void {&#13;" line247="        switch (index) {&#13;" line248="            case mMusic.Dadadum: music.beginMelody(music.builtInMelody(Melodies.Dadadadum), MelodyOptions.Once); break;&#13;" line249="            case mMusic.Birthday: music.beginMelody(music.builtInMelody(Melodies.Birthday), MelodyOptions.Once); break;&#13;" line250="            case mMusic.Entertainer: music.beginMelody(music.builtInMelody(Melodies.Entertainer), MelodyOptions.Once); break;&#13;" line251="            case mMusic.Prelude: music.beginMelody(music.builtInMelody(Melodies.Prelude), MelodyOptions.Once); break;&#13;" line252="            case mMusic.Ode: music.beginMelody(music.builtInMelody(Melodies.Ode), MelodyOptions.Once); break;&#13;" line253="            case mMusic.Nyan: music.beginMelody(music.builtInMelody(Melodies.Nyan), MelodyOptions.Once); break;&#13;" line254="            case mMusic.Ringtone: music.beginMelody(music.builtInMelody(Melodies.Ringtone), MelodyOptions.Once); break;&#13;" line255="            case mMusic.Funk: music.beginMelody(music.builtInMelody(Melodies.Funk), MelodyOptions.Once); break;&#13;" line256="            case mMusic.Blues: music.beginMelody(music.builtInMelody(Melodies.Blues), MelodyOptions.Once); break;&#13;" line257="            case mMusic.Wedding: music.beginMelody(music.builtInMelody(Melodies.Wedding), MelodyOptions.Once); break;&#13;" line258="            case mMusic.Funereal: music.beginMelody(music.builtInMelody(Melodies.Funeral), MelodyOptions.Once); break;&#13;" line259="            case mMusic.Punchline: music.beginMelody(music.builtInMelody(Melodies.Punchline), MelodyOptions.Once); break;&#13;" line260="            case mMusic.Baddy: music.beginMelody(music.builtInMelody(Melodies.Baddy), MelodyOptions.Once); break;&#13;" line261="            case mMusic.Chase: music.beginMelody(music.builtInMelody(Melodies.Chase), MelodyOptions.Once); break;&#13;" line262="            case mMusic.Ba_ding: music.beginMelody(music.builtInMelody(Melodies.BaDing), MelodyOptions.Once); break;&#13;" line263="            case mMusic.Wawawawaa: music.beginMelody(music.builtInMelody(Melodies.Wawawawaa), MelodyOptions.Once); break;&#13;" line264="            case mMusic.Jump_up: music.beginMelody(music.builtInMelody(Melodies.JumpUp), MelodyOptions.Once); break;&#13;" line265="            case mMusic.Jump_down: music.beginMelody(music.builtInMelody(Melodies.JumpDown), MelodyOptions.Once); break;&#13;" line266="            case mMusic.Power_up: music.beginMelody(music.builtInMelody(Melodies.PowerUp), MelodyOptions.Once); break;&#13;" line267="            case mMusic.Power_down: music.beginMelody(music.builtInMelody(Melodies.PowerDown), MelodyOptions.Once); break;&#13;" line268="        }&#13;" line269="    }&#13;" line270="}" numlines="271"></mutation><comment id="undefined" pinned="false" h="80" w="160">% weight=10 color=#1E90FF icon="\uf238" block="HANSHIN STEM mRemote"</comment></block></statement></block></xml>